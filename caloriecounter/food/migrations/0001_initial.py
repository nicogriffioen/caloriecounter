# Generated by Django 2.2.4 on 2019-09-02 06:41

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FoodGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='FoodProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.TextField(verbose_name='full name')),
                ('display_name', models.TextField(verbose_name='display name')),
                ('default_quantity', models.FloatField(help_text='Determines the quantity in base units of 1 product.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='default quantity')),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='i.e. gram', unique=True, verbose_name='name')),
                ('_name_plural', models.TextField(blank=True, help_text='i.e. grams. Leave empty to use a programmatically set plural', null=True, verbose_name='plural name')),
                ('short_name', models.TextField(help_text='i.e. g', verbose_name='Short name')),
                ('is_base', models.BooleanField(default=False, help_text='Determines whether a unit is a base unit. \n                                  Base units are units for which all nutrients for a product are defined.\n                                  For instance Bread contains 200 kcal per 100 base units. \n                                  In this case, base unit is grams.\n                                  Try to avoid defining multiple base units for one quantity.', verbose_name='base unit')),
                ('is_constant', models.BooleanField(default=True, help_text='Determines whether a unit is constant. \n                                                    100 ml is the same for every product, 1 portion is not.', verbose_name='constant')),
                ('base_unit_multiplier', models.FloatField(blank=True, default=1, help_text="The multiplier to convert this unit to it's parent\n                                                            To compare, 1 cup is 236 ml, so for the unit 'cup', \n                                                            the base unit multiplier will be 236", validators=[django.core.validators.MinValueValidator(0)], verbose_name='multiplier')),
                ('parent', models.ForeignKey(blank=True, limit_choices_to={'is_base': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='food.Unit', verbose_name='parent unit')),
            ],
        ),
        migrations.CreateModel(
            name='Nutrient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True, verbose_name='name')),
                ('unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='food.Unit', verbose_name='unit')),
            ],
        ),
        migrations.CreateModel(
            name='FoodProductUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('multiplier', models.FloatField(help_text="Determines the base unit quantity of 1 of this unit, \n                                   i.e. 1 'glass' of milk is <multiplier> grams", validators=[django.core.validators.MinValueValidator(0)], verbose_name='multiplier')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.FoodProduct', verbose_name='product')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='food.Unit', verbose_name='name of the unit')),
            ],
            options={
                'unique_together': {('product', 'unit')},
            },
        ),
        migrations.CreateModel(
            name='FoodProductNutrient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='quantity')),
                ('nutrient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.Nutrient', verbose_name='nutrient')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.FoodProduct', verbose_name='product')),
            ],
            options={
                'unique_together': {('product', 'nutrient')},
            },
        ),
        migrations.AddField(
            model_name='foodproduct',
            name='default_unit',
            field=models.ForeignKey(limit_choices_to={'is_base': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_products', to='food.Unit', verbose_name='default unit'),
        ),
        migrations.AddField(
            model_name='foodproduct',
            name='food_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='food_products', to='food.FoodGroup', verbose_name='food group'),
        ),
        migrations.AddField(
            model_name='foodproduct',
            name='nutrients',
            field=models.ManyToManyField(related_name='products', through='food.FoodProductNutrient', to='food.Nutrient', verbose_name='nutrients'),
        ),
        migrations.AddField(
            model_name='foodproduct',
            name='units',
            field=models.ManyToManyField(related_name='products', through='food.FoodProductUnit', to='food.Unit', verbose_name='units'),
        ),
    ]
